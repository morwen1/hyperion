version: '3'

volumes:
  staging_postgres_data: {}
  staging_postgres_data_backups: {}
  staging_traefik: {}

services:


  traefik:
    build:
      context: .
      dockerfile: ./compose/staging/traefik/Dockerfile
    image: orderbook_veinte_staging_traefik
    depends_on:
      - django
    volumes:
      - staging_traefik:/etc/traefik/acme
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"

      
      
  django: &django
    build:
      context: .
      dockerfile: ./compose/staging/django/Dockerfile
    image: orderbook_veinte_local_django
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
    env_file:
      - ./.envs/.staging/.django
      - ./.envs/.staging/.postgres
    
    command: /start


  golang:
    build : 
      context: . 
      dockerfile: ./compose/staging/golang/Dockerfile
    image: orderbook_veinte_local_golang
    depends_on:
      - django
      - redis 
    volumes : 
      - ./orderbook_veinte/order_book_ws/:/go/src/app
    working_dir: /go/src/app
   
    command: go run .


  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: orderbook_veinte_production_postgres
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
      - staging_postgres_data:/backups
    env_file:
      - ./.envs/.staging/.postgres
   


  redis:
    image: redis:5.0


  

  celeryworker:
    <<: *django
    image: orderbook_veinte_local_celeryworker
    depends_on:
      - django
      - redis
      - postgres
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: orderbook_veinte_local_celerybeat
    depends_on:
      - django
      - redis
      - postgres
      
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    image: orderbook_veinte_local_flower
    ports:
      - "5555:8031"
    command: /start-flower
